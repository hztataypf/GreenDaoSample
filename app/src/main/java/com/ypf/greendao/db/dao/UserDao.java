package com.ypf.greendao.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ypf.greendao.model.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "nielsen_sfa_user".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "nielsen_sfa_user";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, int.class, "userId", false, "user_id");
        public final static Property UserNumber = new Property(2, String.class, "userNumber", false, "user_number");
        public final static Property UserLoginNumber = new Property(3, String.class, "userLoginNumber", false, "user_login_number");
        public final static Property UserLoginPasswd = new Property(4, String.class, "userLoginPasswd", false, "user_long_passwd");
        public final static Property UserName = new Property(5, String.class, "userName", false, "user_name");
        public final static Property UserEngName = new Property(6, String.class, "userEngName", false, "user_eng_name");
        public final static Property SupervisorNumber = new Property(7, String.class, "supervisorNumber", false, "super_visor_number");
        public final static Property UserEmailAddress = new Property(8, String.class, "userEmailAddress", false, "user_email_address");
        public final static Property UserContactInfo = new Property(9, String.class, "userContactInfo", false, "user_contact_info");
        public final static Property UserPasswdFlag = new Property(10, String.class, "userPasswdFlag", false, "user_passwd_flag");
        public final static Property CreateBy = new Property(11, String.class, "createBy", false, "create_by");
        public final static Property CreateDate = new Property(12, String.class, "createDate", false, "create_date");
        public final static Property UpdateBy = new Property(13, String.class, "updateBy", false, "update_by");
        public final static Property UpdateDate = new Property(14, String.class, "updateDate", false, "update_date");
        public final static Property MobileLoginNumber = new Property(15, String.class, "mobileLoginNumber", false, "mobile_login_number");
        public final static Property UserStatusFlag = new Property(16, Integer.class, "userStatusFlag", false, "user_status_flag");
        public final static Property MobileLogTime = new Property(17, Long.class, "mobileLogTime", false, "mobile_long_time");
        public final static Property AllRoleName = new Property(18, String.class, "allRoleName", false, "all_role_name");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"nielsen_sfa_user\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"user_id\" INTEGER NOT NULL UNIQUE ," + // 1: userId
                "\"user_number\" TEXT NOT NULL UNIQUE ," + // 2: userNumber
                "\"user_login_number\" TEXT," + // 3: userLoginNumber
                "\"user_long_passwd\" TEXT," + // 4: userLoginPasswd
                "\"user_name\" TEXT," + // 5: userName
                "\"user_eng_name\" TEXT," + // 6: userEngName
                "\"super_visor_number\" TEXT," + // 7: supervisorNumber
                "\"user_email_address\" TEXT," + // 8: userEmailAddress
                "\"user_contact_info\" TEXT," + // 9: userContactInfo
                "\"user_passwd_flag\" TEXT," + // 10: userPasswdFlag
                "\"create_by\" TEXT," + // 11: createBy
                "\"create_date\" TEXT," + // 12: createDate
                "\"update_by\" TEXT," + // 13: updateBy
                "\"update_date\" TEXT," + // 14: updateDate
                "\"mobile_login_number\" TEXT," + // 15: mobileLoginNumber
                "\"user_status_flag\" INTEGER," + // 16: userStatusFlag
                "\"mobile_long_time\" INTEGER," + // 17: mobileLogTime
                "\"all_role_name\" TEXT);"); // 18: allRoleName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"nielsen_sfa_user\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindString(3, entity.getUserNumber());
 
        String userLoginNumber = entity.getUserLoginNumber();
        if (userLoginNumber != null) {
            stmt.bindString(4, userLoginNumber);
        }
 
        String userLoginPasswd = entity.getUserLoginPasswd();
        if (userLoginPasswd != null) {
            stmt.bindString(5, userLoginPasswd);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(6, userName);
        }
 
        String userEngName = entity.getUserEngName();
        if (userEngName != null) {
            stmt.bindString(7, userEngName);
        }
 
        String supervisorNumber = entity.getSupervisorNumber();
        if (supervisorNumber != null) {
            stmt.bindString(8, supervisorNumber);
        }
 
        String userEmailAddress = entity.getUserEmailAddress();
        if (userEmailAddress != null) {
            stmt.bindString(9, userEmailAddress);
        }
 
        String userContactInfo = entity.getUserContactInfo();
        if (userContactInfo != null) {
            stmt.bindString(10, userContactInfo);
        }
 
        String userPasswdFlag = entity.getUserPasswdFlag();
        if (userPasswdFlag != null) {
            stmt.bindString(11, userPasswdFlag);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(12, createBy);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(13, createDate);
        }
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(14, updateBy);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(15, updateDate);
        }
 
        String mobileLoginNumber = entity.getMobileLoginNumber();
        if (mobileLoginNumber != null) {
            stmt.bindString(16, mobileLoginNumber);
        }
 
        Integer userStatusFlag = entity.getUserStatusFlag();
        if (userStatusFlag != null) {
            stmt.bindLong(17, userStatusFlag);
        }
 
        Long mobileLogTime = entity.getMobileLogTime();
        if (mobileLogTime != null) {
            stmt.bindLong(18, mobileLogTime);
        }
 
        String allRoleName = entity.getAllRoleName();
        if (allRoleName != null) {
            stmt.bindString(19, allRoleName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindString(3, entity.getUserNumber());
 
        String userLoginNumber = entity.getUserLoginNumber();
        if (userLoginNumber != null) {
            stmt.bindString(4, userLoginNumber);
        }
 
        String userLoginPasswd = entity.getUserLoginPasswd();
        if (userLoginPasswd != null) {
            stmt.bindString(5, userLoginPasswd);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(6, userName);
        }
 
        String userEngName = entity.getUserEngName();
        if (userEngName != null) {
            stmt.bindString(7, userEngName);
        }
 
        String supervisorNumber = entity.getSupervisorNumber();
        if (supervisorNumber != null) {
            stmt.bindString(8, supervisorNumber);
        }
 
        String userEmailAddress = entity.getUserEmailAddress();
        if (userEmailAddress != null) {
            stmt.bindString(9, userEmailAddress);
        }
 
        String userContactInfo = entity.getUserContactInfo();
        if (userContactInfo != null) {
            stmt.bindString(10, userContactInfo);
        }
 
        String userPasswdFlag = entity.getUserPasswdFlag();
        if (userPasswdFlag != null) {
            stmt.bindString(11, userPasswdFlag);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(12, createBy);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(13, createDate);
        }
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(14, updateBy);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(15, updateDate);
        }
 
        String mobileLoginNumber = entity.getMobileLoginNumber();
        if (mobileLoginNumber != null) {
            stmt.bindString(16, mobileLoginNumber);
        }
 
        Integer userStatusFlag = entity.getUserStatusFlag();
        if (userStatusFlag != null) {
            stmt.bindLong(17, userStatusFlag);
        }
 
        Long mobileLogTime = entity.getMobileLogTime();
        if (mobileLogTime != null) {
            stmt.bindLong(18, mobileLogTime);
        }
 
        String allRoleName = entity.getAllRoleName();
        if (allRoleName != null) {
            stmt.bindString(19, allRoleName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // userId
            cursor.getString(offset + 2), // userNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userLoginNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userLoginPasswd
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userEngName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // supervisorNumber
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // userEmailAddress
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userContactInfo
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userPasswdFlag
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // createBy
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // createDate
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // updateBy
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // updateDate
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // mobileLoginNumber
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // userStatusFlag
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // mobileLogTime
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // allRoleName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getInt(offset + 1));
        entity.setUserNumber(cursor.getString(offset + 2));
        entity.setUserLoginNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserLoginPasswd(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserEngName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSupervisorNumber(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserEmailAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserContactInfo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserPasswdFlag(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreateBy(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreateDate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUpdateBy(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUpdateDate(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMobileLoginNumber(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUserStatusFlag(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setMobileLogTime(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setAllRoleName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
