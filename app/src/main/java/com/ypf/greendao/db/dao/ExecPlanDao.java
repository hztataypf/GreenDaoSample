package com.ypf.greendao.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ypf.greendao.model.ExecPlan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "nielsen_sfa_exec_plan".
*/
public class ExecPlanDao extends AbstractDao<ExecPlan, Long> {

    public static final String TABLENAME = "nielsen_sfa_exec_plan";

    /**
     * Properties of entity ExecPlan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ExecPlanId = new Property(1, Integer.class, "execPlanId", false, "exec_plan_id");
        public final static Property PeriodId = new Property(2, Integer.class, "periodId", false, "period_id");
        public final static Property QnrTemplateId = new Property(3, Integer.class, "qnrTemplateId", false, "qnr_template_id");
        public final static Property StoreInfoId = new Property(4, Integer.class, "storeInfoId", false, "store_info_id");
        public final static Property StoreOriginalInfoId = new Property(5, Integer.class, "storeOriginalInfoId", false, "store_original_info_id");
        public final static Property UserId = new Property(6, Integer.class, "userId", false, "user_id");
        public final static Property PlanExecDate = new Property(7, String.class, "planExecDate", false, "plan_exec_date");
        public final static Property QcPlanFlag = new Property(8, Integer.class, "qcPlanFlag", false, "qc_plan_flag");
        public final static Property RedoPlanFlag = new Property(9, Integer.class, "redoPlanFlag", false, "redo_plan_flag");
        public final static Property ExecPlanStatusFlag = new Property(10, String.class, "execPlanStatusFlag", false, "status");
        public final static Property Region = new Property(11, String.class, "region", false, "region");
        public final static Property Province = new Property(12, String.class, "province", false, "province");
        public final static Property City = new Property(13, String.class, "city", false, "city");
        public final static Property Country = new Property(14, String.class, "country", false, "country");
        public final static Property District = new Property(15, String.class, "district", false, "district");
        public final static Property StoreCode = new Property(16, String.class, "storeCode", false, "store_code");
        public final static Property StoreName = new Property(17, String.class, "storeName", false, "store_name");
        public final static Property StoreAddress = new Property(18, String.class, "storeAddress", false, "store_address");
        public final static Property ChannelAbbr = new Property(19, String.class, "channelAbbr", false, "channel_abbr");
        public final static Property UserLoginNumber = new Property(20, String.class, "userLoginNumber", false, "user_login_number");
        public final static Property UserName = new Property(21, String.class, "userName", false, "user_name");
        public final static Property QnrName = new Property(22, String.class, "qnrName", false, "qnr_name");
        public final static Property QnrId = new Property(23, Integer.class, "qnrId", false, "qnr_id");
        public final static Property QnrPath = new Property(24, String.class, "qnrPath", false, "qnr_path");
        public final static Property ProjectName = new Property(25, String.class, "projectName", false, "project_name");
        public final static Property DataroundName = new Property(26, String.class, "dataroundName", false, "dataround_name");
        public final static Property ProjectId = new Property(27, Integer.class, "projectId", false, "project_id");
        public final static Property InvestigateCondition = new Property(28, Integer.class, "investigateCondition", false, "investigate_condition");
        public final static Property MobileLoginNumber = new Property(29, String.class, "mobileLoginNumber", false, "user_mobile_loginnumber");
        public final static Property DataroundOrder = new Property(30, String.class, "dataroundOrder", false, "data_round_order");
        public final static Property StoreIsAdd = new Property(31, Integer.class, "storeIsAdd", false, "isAdd");
    };


    public ExecPlanDao(DaoConfig config) {
        super(config);
    }
    
    public ExecPlanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"nielsen_sfa_exec_plan\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"exec_plan_id\" INTEGER UNIQUE ," + // 1: execPlanId
                "\"period_id\" INTEGER," + // 2: periodId
                "\"qnr_template_id\" INTEGER," + // 3: qnrTemplateId
                "\"store_info_id\" INTEGER," + // 4: storeInfoId
                "\"store_original_info_id\" INTEGER," + // 5: storeOriginalInfoId
                "\"user_id\" INTEGER," + // 6: userId
                "\"plan_exec_date\" TEXT," + // 7: planExecDate
                "\"qc_plan_flag\" INTEGER," + // 8: qcPlanFlag
                "\"redo_plan_flag\" INTEGER," + // 9: redoPlanFlag
                "\"status\" TEXT," + // 10: execPlanStatusFlag
                "\"region\" TEXT," + // 11: region
                "\"province\" TEXT," + // 12: province
                "\"city\" TEXT," + // 13: city
                "\"country\" TEXT," + // 14: country
                "\"district\" TEXT," + // 15: district
                "\"store_code\" TEXT," + // 16: storeCode
                "\"store_name\" TEXT," + // 17: storeName
                "\"store_address\" TEXT," + // 18: storeAddress
                "\"channel_abbr\" TEXT," + // 19: channelAbbr
                "\"user_login_number\" TEXT," + // 20: userLoginNumber
                "\"user_name\" TEXT," + // 21: userName
                "\"qnr_name\" TEXT," + // 22: qnrName
                "\"qnr_id\" INTEGER," + // 23: qnrId
                "\"qnr_path\" TEXT," + // 24: qnrPath
                "\"project_name\" TEXT," + // 25: projectName
                "\"dataround_name\" TEXT," + // 26: dataroundName
                "\"project_id\" INTEGER," + // 27: projectId
                "\"investigate_condition\" INTEGER," + // 28: investigateCondition
                "\"user_mobile_loginnumber\" TEXT," + // 29: mobileLoginNumber
                "\"data_round_order\" TEXT," + // 30: dataroundOrder
                "\"isAdd\" INTEGER);"); // 31: storeIsAdd
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"nielsen_sfa_exec_plan\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ExecPlan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer execPlanId = entity.getExecPlanId();
        if (execPlanId != null) {
            stmt.bindLong(2, execPlanId);
        }
 
        Integer periodId = entity.getPeriodId();
        if (periodId != null) {
            stmt.bindLong(3, periodId);
        }
 
        Integer qnrTemplateId = entity.getQnrTemplateId();
        if (qnrTemplateId != null) {
            stmt.bindLong(4, qnrTemplateId);
        }
 
        Integer storeInfoId = entity.getStoreInfoId();
        if (storeInfoId != null) {
            stmt.bindLong(5, storeInfoId);
        }
 
        Integer storeOriginalInfoId = entity.getStoreOriginalInfoId();
        if (storeOriginalInfoId != null) {
            stmt.bindLong(6, storeOriginalInfoId);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(7, userId);
        }
 
        String planExecDate = entity.getPlanExecDate();
        if (planExecDate != null) {
            stmt.bindString(8, planExecDate);
        }
 
        Integer qcPlanFlag = entity.getQcPlanFlag();
        if (qcPlanFlag != null) {
            stmt.bindLong(9, qcPlanFlag);
        }
 
        Integer redoPlanFlag = entity.getRedoPlanFlag();
        if (redoPlanFlag != null) {
            stmt.bindLong(10, redoPlanFlag);
        }
 
        String execPlanStatusFlag = entity.getExecPlanStatusFlag();
        if (execPlanStatusFlag != null) {
            stmt.bindString(11, execPlanStatusFlag);
        }
 
        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(12, region);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(13, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(14, city);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(15, country);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(16, district);
        }
 
        String storeCode = entity.getStoreCode();
        if (storeCode != null) {
            stmt.bindString(17, storeCode);
        }
 
        String storeName = entity.getStoreName();
        if (storeName != null) {
            stmt.bindString(18, storeName);
        }
 
        String storeAddress = entity.getStoreAddress();
        if (storeAddress != null) {
            stmt.bindString(19, storeAddress);
        }
 
        String channelAbbr = entity.getChannelAbbr();
        if (channelAbbr != null) {
            stmt.bindString(20, channelAbbr);
        }
 
        String userLoginNumber = entity.getUserLoginNumber();
        if (userLoginNumber != null) {
            stmt.bindString(21, userLoginNumber);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(22, userName);
        }
 
        String qnrName = entity.getQnrName();
        if (qnrName != null) {
            stmt.bindString(23, qnrName);
        }
 
        Integer qnrId = entity.getQnrId();
        if (qnrId != null) {
            stmt.bindLong(24, qnrId);
        }
 
        String qnrPath = entity.getQnrPath();
        if (qnrPath != null) {
            stmt.bindString(25, qnrPath);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(26, projectName);
        }
 
        String dataroundName = entity.getDataroundName();
        if (dataroundName != null) {
            stmt.bindString(27, dataroundName);
        }
 
        Integer projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindLong(28, projectId);
        }
 
        Integer investigateCondition = entity.getInvestigateCondition();
        if (investigateCondition != null) {
            stmt.bindLong(29, investigateCondition);
        }
 
        String mobileLoginNumber = entity.getMobileLoginNumber();
        if (mobileLoginNumber != null) {
            stmt.bindString(30, mobileLoginNumber);
        }
 
        String dataroundOrder = entity.getDataroundOrder();
        if (dataroundOrder != null) {
            stmt.bindString(31, dataroundOrder);
        }
 
        Integer storeIsAdd = entity.getStoreIsAdd();
        if (storeIsAdd != null) {
            stmt.bindLong(32, storeIsAdd);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ExecPlan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer execPlanId = entity.getExecPlanId();
        if (execPlanId != null) {
            stmt.bindLong(2, execPlanId);
        }
 
        Integer periodId = entity.getPeriodId();
        if (periodId != null) {
            stmt.bindLong(3, periodId);
        }
 
        Integer qnrTemplateId = entity.getQnrTemplateId();
        if (qnrTemplateId != null) {
            stmt.bindLong(4, qnrTemplateId);
        }
 
        Integer storeInfoId = entity.getStoreInfoId();
        if (storeInfoId != null) {
            stmt.bindLong(5, storeInfoId);
        }
 
        Integer storeOriginalInfoId = entity.getStoreOriginalInfoId();
        if (storeOriginalInfoId != null) {
            stmt.bindLong(6, storeOriginalInfoId);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(7, userId);
        }
 
        String planExecDate = entity.getPlanExecDate();
        if (planExecDate != null) {
            stmt.bindString(8, planExecDate);
        }
 
        Integer qcPlanFlag = entity.getQcPlanFlag();
        if (qcPlanFlag != null) {
            stmt.bindLong(9, qcPlanFlag);
        }
 
        Integer redoPlanFlag = entity.getRedoPlanFlag();
        if (redoPlanFlag != null) {
            stmt.bindLong(10, redoPlanFlag);
        }
 
        String execPlanStatusFlag = entity.getExecPlanStatusFlag();
        if (execPlanStatusFlag != null) {
            stmt.bindString(11, execPlanStatusFlag);
        }
 
        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(12, region);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(13, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(14, city);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(15, country);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(16, district);
        }
 
        String storeCode = entity.getStoreCode();
        if (storeCode != null) {
            stmt.bindString(17, storeCode);
        }
 
        String storeName = entity.getStoreName();
        if (storeName != null) {
            stmt.bindString(18, storeName);
        }
 
        String storeAddress = entity.getStoreAddress();
        if (storeAddress != null) {
            stmt.bindString(19, storeAddress);
        }
 
        String channelAbbr = entity.getChannelAbbr();
        if (channelAbbr != null) {
            stmt.bindString(20, channelAbbr);
        }
 
        String userLoginNumber = entity.getUserLoginNumber();
        if (userLoginNumber != null) {
            stmt.bindString(21, userLoginNumber);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(22, userName);
        }
 
        String qnrName = entity.getQnrName();
        if (qnrName != null) {
            stmt.bindString(23, qnrName);
        }
 
        Integer qnrId = entity.getQnrId();
        if (qnrId != null) {
            stmt.bindLong(24, qnrId);
        }
 
        String qnrPath = entity.getQnrPath();
        if (qnrPath != null) {
            stmt.bindString(25, qnrPath);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(26, projectName);
        }
 
        String dataroundName = entity.getDataroundName();
        if (dataroundName != null) {
            stmt.bindString(27, dataroundName);
        }
 
        Integer projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindLong(28, projectId);
        }
 
        Integer investigateCondition = entity.getInvestigateCondition();
        if (investigateCondition != null) {
            stmt.bindLong(29, investigateCondition);
        }
 
        String mobileLoginNumber = entity.getMobileLoginNumber();
        if (mobileLoginNumber != null) {
            stmt.bindString(30, mobileLoginNumber);
        }
 
        String dataroundOrder = entity.getDataroundOrder();
        if (dataroundOrder != null) {
            stmt.bindString(31, dataroundOrder);
        }
 
        Integer storeIsAdd = entity.getStoreIsAdd();
        if (storeIsAdd != null) {
            stmt.bindLong(32, storeIsAdd);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ExecPlan readEntity(Cursor cursor, int offset) {
        ExecPlan entity = new ExecPlan( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // execPlanId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // periodId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // qnrTemplateId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // storeInfoId
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // storeOriginalInfoId
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // userId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // planExecDate
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // qcPlanFlag
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // redoPlanFlag
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // execPlanStatusFlag
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // region
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // province
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // city
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // country
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // district
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // storeCode
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // storeName
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // storeAddress
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // channelAbbr
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // userLoginNumber
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // userName
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // qnrName
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // qnrId
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // qnrPath
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // projectName
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // dataroundName
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // projectId
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // investigateCondition
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // mobileLoginNumber
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // dataroundOrder
            cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31) // storeIsAdd
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ExecPlan entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setExecPlanId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPeriodId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setQnrTemplateId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setStoreInfoId(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setStoreOriginalInfoId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setUserId(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPlanExecDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setQcPlanFlag(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setRedoPlanFlag(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setExecPlanStatusFlag(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRegion(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setProvince(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCity(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCountry(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDistrict(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setStoreCode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setStoreName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setStoreAddress(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setChannelAbbr(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUserLoginNumber(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setUserName(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setQnrName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setQnrId(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setQnrPath(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setProjectName(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setDataroundName(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setProjectId(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setInvestigateCondition(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setMobileLoginNumber(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setDataroundOrder(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setStoreIsAdd(cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ExecPlan entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ExecPlan entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
